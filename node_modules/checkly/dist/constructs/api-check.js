"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiCheck = exports.AssertionBuilder = void 0;
const path = __importStar(require("path"));
const check_1 = require("./check");
const project_1 = require("./project");
const parser_1 = require("../services/check-parser/parser");
const util_1 = require("../services/util");
const util_2 = require("../reporters/util");
// eslint-disable-next-line no-restricted-syntax
var AssertionSource;
(function (AssertionSource) {
    AssertionSource["STATUS_CODE"] = "STATUS_CODE";
    AssertionSource["JSON_BODY"] = "JSON_BODY";
    AssertionSource["HEADERS"] = "HEADERS";
    AssertionSource["TEXT_BODY"] = "TEXT_BODY";
    AssertionSource["RESPONSE_TIME"] = "RESPONSE_TIME";
})(AssertionSource || (AssertionSource = {}));
// eslint-disable-next-line no-restricted-syntax
var AssertionComparison;
(function (AssertionComparison) {
    AssertionComparison["EQUALS"] = "EQUALS";
    AssertionComparison["NOT_EQUALS"] = "NOT_EQUALS";
    AssertionComparison["HAS_KEY"] = "HAS_KEY";
    AssertionComparison["NOT_HAS_KEY"] = "NOT_HAS_KEY";
    AssertionComparison["HAS_VALUE"] = "HAS_VALUE";
    AssertionComparison["NOT_HAS_VALUE"] = "NOT_HAS_VALUE";
    AssertionComparison["IS_EMPTY"] = "IS_EMPTY";
    AssertionComparison["NOT_EMPTY"] = "NOT_EMPTY";
    AssertionComparison["GREATER_THAN"] = "GREATER_THAN";
    AssertionComparison["LESS_THAN"] = "LESS_THAN";
    AssertionComparison["CONTAINS"] = "CONTAINS";
    AssertionComparison["NOT_CONTAINS"] = "NOT_CONTAINS";
    AssertionComparison["IS_NULL"] = "IS_NULL";
    AssertionComparison["NOT_NULL"] = "NOT_NULL";
})(AssertionComparison || (AssertionComparison = {}));
class AssertionBuilder {
    static statusCode() {
        return new NumericAssertionBuilder(AssertionSource.STATUS_CODE);
    }
    static jsonBody(property) {
        return new GeneralAssertionBuilder(AssertionSource.JSON_BODY, property);
    }
    static headers(property, regex) {
        return new GeneralAssertionBuilder(AssertionSource.HEADERS, property, regex);
    }
    static textBody(property) {
        return new GeneralAssertionBuilder(AssertionSource.TEXT_BODY, property);
    }
    /** @deprecated Use responseTime() instead */
    static responseTme() {
        return new NumericAssertionBuilder(AssertionSource.RESPONSE_TIME);
    }
    static responseTime() {
        return new NumericAssertionBuilder(AssertionSource.RESPONSE_TIME);
    }
}
exports.AssertionBuilder = AssertionBuilder;
class NumericAssertionBuilder {
    constructor(source) {
        this.source = source;
    }
    equals(target) {
        return this._toAssertion(AssertionComparison.EQUALS, target);
    }
    notEquals(target) {
        return this._toAssertion(AssertionComparison.NOT_EQUALS, target);
    }
    lessThan(target) {
        return this._toAssertion(AssertionComparison.LESS_THAN, target);
    }
    greaterThan(target) {
        return this._toAssertion(AssertionComparison.GREATER_THAN, target);
    }
    /** @private */
    _toAssertion(comparison, target) {
        return { source: this.source, comparison, property: '', target: target.toString(), regex: null };
    }
}
class GeneralAssertionBuilder {
    constructor(source, property, regex) {
        this.source = source;
        this.property = property;
        this.regex = regex;
    }
    equals(target) {
        return this._toAssertion(AssertionComparison.EQUALS, target);
    }
    notEquals(target) {
        return this._toAssertion(AssertionComparison.NOT_EQUALS, target);
    }
    hasKey(target) {
        return this._toAssertion(AssertionComparison.HAS_KEY, target);
    }
    notHasKey(target) {
        return this._toAssertion(AssertionComparison.NOT_HAS_KEY, target);
    }
    hasValue(target) {
        return this._toAssertion(AssertionComparison.HAS_VALUE, target);
    }
    notHasValue(target) {
        return this._toAssertion(AssertionComparison.NOT_HAS_VALUE, target);
    }
    isEmpty() {
        return this._toAssertion(AssertionComparison.IS_EMPTY);
    }
    notEmpty() {
        return this._toAssertion(AssertionComparison.NOT_EMPTY);
    }
    lessThan(target) {
        return this._toAssertion(AssertionComparison.LESS_THAN, target);
    }
    greaterThan(target) {
        return this._toAssertion(AssertionComparison.GREATER_THAN, target);
    }
    contains(target) {
        return this._toAssertion(AssertionComparison.CONTAINS, target);
    }
    notContains(target) {
        return this._toAssertion(AssertionComparison.NOT_CONTAINS, target);
    }
    isNull() {
        return this._toAssertion(AssertionComparison.IS_NULL);
    }
    isNotNull() {
        return this._toAssertion(AssertionComparison.NOT_NULL);
    }
    /** @private */
    _toAssertion(comparison, target) {
        var _a, _b, _c;
        return {
            source: this.source,
            comparison,
            property: (_a = this.property) !== null && _a !== void 0 ? _a : '',
            target: (_b = target === null || target === void 0 ? void 0 : target.toString()) !== null && _b !== void 0 ? _b : '',
            regex: (_c = this.regex) !== null && _c !== void 0 ? _c : null,
        };
    }
}
function _printWarning(path) {
    (0, util_2.printDeprecationWarning)(`API check "${path}" is probably providing a setup ` +
        'or tearDown script using the "localSetupScript" or "localTearDownScript" property. Please update your API checks to ' +
        'reference any setup / tearDown using the "setupScript" and "tearDownScript" properties See the docs at ' +
        'https://checklyhq.com/docs/cli/constructs-reference#apicheck');
}
/**
 * Creates an API Check
 *
 * @remarks
 *
 * This class make use of the API Checks endpoints.
 */
class ApiCheck extends check_1.Check {
    /**
     * Constructs the API Check instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props check configuration properties
     *
     * {@link https://checklyhq.com/docs/cli/constructs/#apicheck Read more in the docs}
     */
    constructor(logicalId, props) {
        super(logicalId, props);
        if (props.setupScript) {
            if ('entrypoint' in props.setupScript) {
                const { script, scriptPath, dependencies } = ApiCheck.bundle(props.setupScript.entrypoint, this.runtimeId);
                this.localSetupScript = script;
                this.setupScriptPath = scriptPath;
                this.setupScriptDependencies = dependencies;
            }
            else if ('content' in props.setupScript) {
                this.localSetupScript = props.setupScript.content;
            }
            else {
                throw new Error('Unrecognized type for the "setupScript" property. A "setupScript" should have either a "content" ' +
                    'or "entrypoint" property.');
            }
        }
        if (props.localSetupScript) {
            _printWarning(project_1.Session.checkFilePath);
            this.localSetupScript = props.localSetupScript;
        }
        if (props.tearDownScript) {
            if ('entrypoint' in props.tearDownScript) {
                const { script, scriptPath, dependencies } = ApiCheck.bundle(props.tearDownScript.entrypoint, this.runtimeId);
                this.localTearDownScript = script;
                this.tearDownScriptPath = scriptPath;
                this.tearDownScriptDependencies = dependencies;
            }
            else if ('content' in props.tearDownScript) {
                this.localTearDownScript = props.tearDownScript.content;
            }
        }
        if (props.localTearDownScript) {
            _printWarning(project_1.Session.checkFilePath);
            this.localTearDownScript = props.localTearDownScript;
        }
        this.request = props.request;
        this.degradedResponseTime = props.degradedResponseTime;
        this.maxResponseTime = props.maxResponseTime;
        project_1.Session.registerConstruct(this);
        this.addSubscriptions();
        this.addPrivateLocationCheckAssignments();
    }
    static bundle(entrypoint, runtimeId) {
        let absoluteEntrypoint = null;
        if (path.isAbsolute(entrypoint)) {
            absoluteEntrypoint = entrypoint;
        }
        else {
            if (!project_1.Session.checkFileAbsolutePath) {
                throw new Error('You cant use relative paths without the checkFileAbsolutePath in session');
            }
            absoluteEntrypoint = path.join(path.dirname(project_1.Session.checkFileAbsolutePath), entrypoint);
        }
        const runtime = project_1.Session.availableRuntimes[runtimeId];
        if (!runtime) {
            throw new Error(`${runtimeId} is not supported`);
        }
        const parser = new parser_1.Parser(Object.keys(runtime.dependencies));
        const parsed = parser.parse(absoluteEntrypoint);
        // Maybe we can get the parsed deps with the content immediately
        const deps = [];
        for (const { filePath, content } of parsed.dependencies) {
            deps.push({
                path: (0, util_1.pathToPosix)(path.relative(project_1.Session.basePath, filePath)),
                content,
            });
        }
        return {
            script: parsed.entrypoint.content,
            scriptPath: (0, util_1.pathToPosix)(path.relative(project_1.Session.basePath, parsed.entrypoint.filePath)),
            dependencies: deps,
        };
    }
    synthesize() {
        return {
            ...super.synthesize(),
            checkType: 'API',
            request: this.request,
            localSetupScript: this.localSetupScript,
            setupScriptPath: this.setupScriptPath,
            setupScriptDependencies: this.setupScriptDependencies,
            localTearDownScript: this.localTearDownScript,
            tearDownScriptPath: this.tearDownScriptPath,
            tearDownScriptDependencies: this.tearDownScriptDependencies,
            degradedResponseTime: this.degradedResponseTime,
            maxResponseTime: this.maxResponseTime,
        };
    }
}
exports.ApiCheck = ApiCheck;
//# sourceMappingURL=api-check.js.map