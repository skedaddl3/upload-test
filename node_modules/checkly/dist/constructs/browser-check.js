"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserCheck = void 0;
const path = __importStar(require("path"));
const check_1 = require("./check");
const project_1 = require("./project");
const parser_1 = require("../services/check-parser/parser");
const util_1 = require("../services/util");
const snapshot_service_1 = require("../services/snapshot-service");
/**
 * Creates a Browser Check
 *
 * @remarks
 *
 * This class make use of the Browser Checks endpoints.
 */
class BrowserCheck extends check_1.Check {
    /**
     * Constructs the Browser Check instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props check configuration properties
     * {@link https://checklyhq.com/docs/cli/constructs/#browsercheck Read more in the docs}
     */
    constructor(logicalId, props) {
        if (props.group) {
            BrowserCheck.applyDefaultBrowserCheckGroupConfig(props, props.group.getBrowserCheckDefaults());
        }
        BrowserCheck.applyDefaultBrowserCheckConfig(props);
        super(logicalId, props);
        this.sslCheckDomain = props.sslCheckDomain;
        if ('content' in props.code) {
            const script = props.code.content;
            this.script = script;
        }
        else if ('entrypoint' in props.code) {
            const entrypoint = props.code.entrypoint;
            let absoluteEntrypoint = null;
            if (path.isAbsolute(entrypoint)) {
                absoluteEntrypoint = entrypoint;
            }
            else {
                if (!project_1.Session.checkFileAbsolutePath) {
                    throw new Error('You cannot use relative paths without the checkFileAbsolutePath in session');
                }
                absoluteEntrypoint = path.join(path.dirname(project_1.Session.checkFileAbsolutePath), entrypoint);
            }
            // runtimeId will always be set by check or browser check defaults so it is safe to use ! operator
            const bundle = BrowserCheck.bundle(absoluteEntrypoint, this.runtimeId);
            if (!bundle.script) {
                throw new Error(`Browser check "${logicalId}" is not allowed to be empty`);
            }
            this.script = bundle.script;
            this.scriptPath = bundle.scriptPath;
            this.dependencies = bundle.dependencies;
            this.rawSnapshots = bundle.snapshots;
        }
        else {
            throw new Error('Unrecognized type for the "code" property. The "code" property should be a string of JS/TS code.');
        }
        project_1.Session.registerConstruct(this);
        this.addSubscriptions();
        this.addPrivateLocationCheckAssignments();
    }
    static applyDefaultBrowserCheckGroupConfig(props, groupProps) {
        var _a;
        let configKey;
        for (configKey in groupProps) {
            const newVal = (_a = props[configKey]) !== null && _a !== void 0 ? _a : groupProps[configKey];
            props[configKey] = newVal;
        }
    }
    static applyDefaultBrowserCheckConfig(props) {
        var _a;
        if (!project_1.Session.browserCheckDefaults) {
            return;
        }
        let configKey;
        for (configKey in project_1.Session.browserCheckDefaults) {
            const newVal = (_a = props[configKey]) !== null && _a !== void 0 ? _a : project_1.Session.browserCheckDefaults[configKey];
            props[configKey] = newVal;
        }
    }
    static bundle(entry, runtimeId) {
        const runtime = project_1.Session.availableRuntimes[runtimeId];
        if (!runtime) {
            throw new Error(`${runtimeId} is not supported`);
        }
        const parser = new parser_1.Parser(Object.keys(runtime.dependencies));
        const parsed = parser.parse(entry);
        // Maybe we can get the parsed deps with the content immediately
        const deps = [];
        for (const { filePath, content } of parsed.dependencies) {
            deps.push({
                path: (0, util_1.pathToPosix)(path.relative(project_1.Session.basePath, filePath)),
                content,
            });
        }
        return {
            script: parsed.entrypoint.content,
            scriptPath: (0, util_1.pathToPosix)(path.relative(project_1.Session.basePath, parsed.entrypoint.filePath)),
            dependencies: deps,
            snapshots: (0, snapshot_service_1.detectSnapshots)(project_1.Session.basePath, parsed.entrypoint.filePath),
        };
    }
    getSourceFile() {
        var _a;
        return (_a = this.__checkFilePath) !== null && _a !== void 0 ? _a : this.scriptPath;
    }
    synthesize() {
        return {
            ...super.synthesize(),
            checkType: 'BROWSER',
            script: this.script,
            scriptPath: this.scriptPath,
            dependencies: this.dependencies,
            sslCheckDomain: this.sslCheckDomain || null,
            snapshots: this.snapshots,
        };
    }
}
exports.BrowserCheck = BrowserCheck;
//# sourceMappingURL=browser-check.js.map