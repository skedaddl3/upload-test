import { Ref } from './ref';
import { Frequency } from './frequency';
import { Construct } from './construct';
import { AlertChannel } from './alert-channel';
import { EnvironmentVariable } from './environment-variable';
import type { Region } from '..';
import type { CheckGroup } from './check-group';
import { PrivateLocation } from './private-location';
import { RetryStrategy } from './retry-strategy';
export interface CheckProps {
    /**
     *  The name of the check.
     */
    name: string;
    /**
     *  Determines if the check is running or not.
     */
    activated?: boolean;
    /**
     * Determines if any notifications will be sent out when a check fails and/or recovers.
     */
    muted?: boolean;
    /**
     * Setting this to "true" will trigger a retry when a check fails from the failing region and another,
     * randomly selected region before marking the check as failed.
     * @deprecated Use {@link CheckProps.retryStrategy} instead.
     */
    doubleCheck?: boolean;
    /**
     * Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.
     * This only applies to API Checks.
     */
    shouldFail?: boolean;
    /**
     * The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.
     */
    runtimeId?: string;
    /**
     * An array of one or more data center locations where to run this check. The supported regions are:
     * us-east-1, us-east-2, us-west-1, us-west-2, ca-central-1, sa-east-1,
     * eu-west-1, eu-central-1, eu-west-2, eu-west-3, eu-north-1, eu-south-1, me-south-1,
     * ap-southeast-1, ap-northeast-1, ap-east-1, ap-southeast-2, ap-southeast-3, ap-northeast-2, ap-northeast-3,
     * ap-south-1, af-south-1
     */
    locations?: Array<keyof Region>;
    /**
     * An array of one or more private locations where to run the check.
     * PrivateLocation instances or slug name strings are allowed.
     *
     * `string` slug names are **only** allowed for private locations that **not** belong to the project. Use
     * PrivateLocation instances references for private locations created within the project.
     */
    privateLocations?: Array<string | PrivateLocation>;
    /**
     * Tags for organizing and filtering checks.
     */
    tags?: Array<string>;
    /**
     * How often the check should run in minutes.
     */
    frequency?: number | Frequency;
    environmentVariables?: Array<EnvironmentVariable>;
    /**
     * The id of the check group this check is part of. Set this by calling `someGroup.ref()`
     * @deprecated Use {@link CheckProps.group} instead.
     */
    groupId?: Ref;
    /**
     * The CheckGroup that this check is part of.
     */
    group?: CheckGroup;
    /**
     * List of alert channels to notify when the check fails or recovers.
     */
    alertChannels?: Array<AlertChannel>;
    /**
     * Determines if the check is available only when 'test' runs (not included when 'deploy' is executed).
     */
    testOnly?: boolean;
    /**
     * Sets a retry policy for the check. Use RetryStrategyBuilder to create a retry policy.
     */
    retryStrategy?: RetryStrategy;
}
export declare abstract class Check extends Construct {
    name: string;
    activated?: boolean;
    muted?: boolean;
    doubleCheck?: boolean;
    shouldFail?: boolean;
    runtimeId?: string;
    locations?: Array<keyof Region>;
    privateLocations?: Array<string | PrivateLocation>;
    tags?: Array<string>;
    frequency?: number;
    frequencyOffset?: number;
    environmentVariables?: Array<EnvironmentVariable>;
    groupId?: Ref;
    alertChannels?: Array<AlertChannel>;
    testOnly?: boolean;
    retryStrategy?: RetryStrategy;
    __checkFilePath?: string;
    static readonly __checklyType = "check";
    constructor(logicalId: string, props: CheckProps);
    private static applyDefaultCheckGroupConfig;
    private static applyDefaultCheckConfig;
    addSubscriptions(): void;
    addPrivateLocationCheckAssignments(): void;
    getSourceFile(): string | undefined;
    synthesize(): {
        name: string;
        activated: boolean | undefined;
        muted: boolean | undefined;
        doubleCheck: boolean | undefined;
        shouldFail: boolean | undefined;
        runtimeId: string | undefined;
        locations: (keyof Region)[] | undefined;
        privateLocations: undefined;
        tags: string[] | undefined;
        frequency: number | undefined;
        frequencyOffset: number | undefined;
        groupId: Ref | undefined;
        environmentVariables: import("./key-value-pair").default[] | undefined;
        retryStrategy: RetryStrategy | undefined;
    };
}
