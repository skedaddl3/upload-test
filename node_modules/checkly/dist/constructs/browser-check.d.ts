import { Check, CheckProps } from './check';
import { Content, Entrypoint } from './construct';
import { Snapshot } from '../services/snapshot-service';
export interface CheckDependency {
    path: string;
    content: string;
}
export interface BrowserCheckProps extends CheckProps {
    /**
     * A valid piece of Node.js javascript code describing a browser interaction
     * with the Puppeteer or Playwright frameworks.
     */
    code: Content | Entrypoint;
    /**
     * A valid fully qualified domain name (FQDN) to check for SSL certificate
     * expiration. For example, 'app.checklyhq.com'.
     */
    sslCheckDomain?: string;
}
/**
 * Creates a Browser Check
 *
 * @remarks
 *
 * This class make use of the Browser Checks endpoints.
 */
export declare class BrowserCheck extends Check {
    script: string;
    scriptPath?: string;
    dependencies?: Array<CheckDependency>;
    sslCheckDomain?: string;
    rawSnapshots?: Array<{
        absolutePath: string;
        path: string;
    }>;
    snapshots?: Array<Snapshot>;
    /**
     * Constructs the Browser Check instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props check configuration properties
     * {@link https://checklyhq.com/docs/cli/constructs/#browsercheck Read more in the docs}
     */
    constructor(logicalId: string, props: BrowserCheckProps);
    private static applyDefaultBrowserCheckGroupConfig;
    private static applyDefaultBrowserCheckConfig;
    static bundle(entry: string, runtimeId: string): {
        script: string;
        scriptPath: string;
        dependencies: CheckDependency[];
        snapshots: {
            absolutePath: string;
            path: string;
        }[];
    };
    getSourceFile(): string | undefined;
    synthesize(): {
        checkType: string;
        script: string;
        scriptPath: string | undefined;
        dependencies: CheckDependency[] | undefined;
        sslCheckDomain: string | null;
        snapshots: Snapshot[] | undefined;
        name: string;
        activated: boolean | undefined;
        muted: boolean | undefined;
        doubleCheck: boolean | undefined;
        shouldFail: boolean | undefined;
        runtimeId: string | undefined;
        locations: (keyof import("../index").Region)[] | undefined;
        privateLocations: undefined;
        tags: string[] | undefined;
        frequency: number | undefined;
        frequencyOffset: number | undefined;
        groupId: import("./ref").Ref | undefined;
        environmentVariables: import("./key-value-pair").default[] | undefined;
        retryStrategy: import("./retry-strategy").RetryStrategy | undefined;
    };
}
