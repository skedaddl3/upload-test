"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckGroup = void 0;
const path = __importStar(require("path"));
const glob_1 = require("glob");
const ref_1 = require("./ref");
const project_1 = require("./project");
const construct_1 = require("./construct");
const browser_check_1 = require("./browser-check");
const alert_channel_subscription_1 = require("./alert-channel-subscription");
const private_location_group_assignment_1 = require("./private-location-group-assignment");
const util_1 = require("../services/util");
const defaultApiCheckDefaults = {
    headers: [],
    queryParameters: [],
    url: '',
    basicAuth: {
        username: '',
        password: '',
    },
};
/**
 * Creates a Check Group
 *
 * @remarks
 *
 * This class make use of the Check Groups endpoints.
 */
class CheckGroup extends construct_1.Construct {
    /**
     * Constructs the CheckGroup instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props CheckGroup configuration properties
     *
     * {@link https://checklyhq.com/docs/cli/constructs/#checkgroup Read more in the docs}
     */
    constructor(logicalId, props) {
        var _a, _b, _c;
        super(CheckGroup.__checklyType, logicalId);
        this.name = props.name;
        this.activated = props.activated;
        this.muted = props.muted;
        this.doubleCheck = props.doubleCheck;
        this.tags = props.tags;
        this.runtimeId = props.runtimeId;
        this.locations = props.locations;
        this.privateLocations = props.privateLocations;
        this.concurrency = props.concurrency;
        // `frequency` is not a CheckGroup resource property. Not present in synthesize()
        this.frequency = props.frequency;
        this.apiCheckDefaults = { ...defaultApiCheckDefaults, ...props.apiCheckDefaults };
        this.environmentVariables = (_a = props.environmentVariables) !== null && _a !== void 0 ? _a : [];
        this.environmentVariables.forEach(ev => {
            // only empty string is checked because the KeyValuePair.value doesn't allow undefined or null.
            if (ev.value === '') {
                throw new Error(`Environment variable "${ev.key}" from check group "${logicalId}" is not allowed to be empty`);
            }
        });
        this.alertChannels = (_b = props.alertChannels) !== null && _b !== void 0 ? _b : [];
        this.localSetupScript = props.localSetupScript;
        this.localTearDownScript = props.localTearDownScript;
        this.retryStrategy = props.retryStrategy;
        // `browserChecks` is not a CheckGroup resource property. Not present in synthesize()
        this.browserChecks = props.browserChecks;
        const fileAbsolutePath = project_1.Session.checkFileAbsolutePath;
        if ((_c = props.browserChecks) === null || _c === void 0 ? void 0 : _c.testMatch) {
            this.__addChecks(fileAbsolutePath, props.browserChecks.testMatch);
        }
        project_1.Session.registerConstruct(this);
        this.__addSubscriptions();
        this.__addPrivateLocationGroupAssignments();
    }
    __addChecks(fileAbsolutePath, testMatch) {
        const parent = path.dirname(fileAbsolutePath);
        const matched = glob_1.glob.sync(testMatch, { nodir: true, cwd: parent });
        for (const match of matched) {
            const filepath = path.join(parent, match);
            const props = {
                group: this,
                name: match,
                code: {
                    entrypoint: filepath,
                },
                // the browserChecks props inherited from the group are applied in BrowserCheck.constructor()
            };
            const checkLogicalId = (0, util_1.pathToPosix)(path.relative(project_1.Session.basePath, filepath));
            const check = new browser_check_1.BrowserCheck(checkLogicalId, props);
        }
    }
    __addSubscriptions() {
        if (!this.alertChannels) {
            return;
        }
        for (const alertChannel of this.alertChannels) {
            const subscription = new alert_channel_subscription_1.AlertChannelSubscription(`check-group-alert-channel-subscription#${this.logicalId}#${alertChannel.logicalId}`, {
                alertChannelId: ref_1.Ref.from(alertChannel.logicalId),
                groupId: ref_1.Ref.from(this.logicalId),
                activated: true,
            });
        }
    }
    __addPrivateLocationGroupAssignments() {
        if (!this.privateLocations) {
            return;
        }
        for (const privateLocation of this.privateLocations) {
            // slugName strings are processed in loadAllPrivateLocations()
            if (typeof privateLocation === 'string') {
                continue;
            }
            // use private location assignment for instances
            const assignment = new private_location_group_assignment_1.PrivateLocationGroupAssignment(`private-location-group-assignment#${this.logicalId}#${privateLocation.logicalId}`, {
                privateLocationId: ref_1.Ref.from(privateLocation.logicalId),
                groupId: ref_1.Ref.from(this.logicalId),
            });
        }
    }
    getCheckDefaults() {
        // TODO: investigate if make sense to add all other check's properties
        return {
            frequency: this.frequency,
        };
    }
    getBrowserCheckDefaults() {
        var _a;
        // TODO: investigate if make sense to add all other browser-check's properties
        return {
            frequency: (_a = this.browserChecks) === null || _a === void 0 ? void 0 : _a.frequency,
        };
    }
    getMultiStepCheckDefaults() {
        var _a;
        return {
            frequency: (_a = this.browserChecks) === null || _a === void 0 ? void 0 : _a.frequency,
        };
    }
    synthesize() {
        return {
            name: this.name,
            activated: this.activated,
            muted: this.muted,
            doubleCheck: this.doubleCheck,
            tags: this.tags,
            locations: this.locations,
            // private-location instances are assigned with loadAllPrivateLocations()
            privateLocations: undefined,
            concurrency: this.concurrency,
            localSetupScript: this.localSetupScript,
            localTearDownScript: this.localTearDownScript,
            apiCheckDefaults: this.apiCheckDefaults,
            environmentVariables: this.environmentVariables,
            retryStrategy: this.retryStrategy,
        };
    }
}
exports.CheckGroup = CheckGroup;
CheckGroup.__checklyType = 'check-group';
//# sourceMappingURL=check-group.js.map