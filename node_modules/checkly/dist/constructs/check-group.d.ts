import { Construct } from './construct';
import { AlertChannel } from './alert-channel';
import { EnvironmentVariable } from './environment-variable';
import { PrivateLocation } from './private-location';
import { CheckConfigDefaults } from '../services/checkly-config-loader';
import { ApiCheckDefaultConfig } from './api-check';
import type { Region } from '..';
import type { Frequency } from './frequency';
import type { RetryStrategy } from './retry-strategy';
type BrowserCheckConfig = CheckConfigDefaults & {
    /**
     * Glob pattern to include multiple files, i.e. all `.spec.ts` files
     */
    testMatch: string;
};
type MultiStepCheckConfig = CheckConfigDefaults & {
    /**
     * Glob pattern to include multiple files, i.e. all `.spec.ts` files
     */
    testMatch: string;
};
export interface CheckGroupProps {
    /**
     * The name of the check group.
     */
    name: string;
    /**
     * Determines if the checks in the group are running or not.
     */
    activated?: boolean;
    /**
     * Determines if any notifications will be sent out when a check in this group fails and/or recovers.
     */
    muted?: boolean;
    /**
     * Setting this to "true" will trigger a retry when a check fails from the failing region and another,
     * randomly selected region before marking the check as failed.
     * @deprecated Use {@link CheckGroupProps.retryStrategy} instead.
     */
    doubleCheck?: boolean;
    /**
     * The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.
     */
    runtimeId?: string;
    /**
     * An array of one or more data center locations where to run the checks.
     */
    locations: Array<keyof Region>;
    /**
     * An array of one or more private locations where to run the checks.
     */
    privateLocations?: Array<string | PrivateLocation>;
    /**
     * Tags for organizing and filtering checks.
     */
    tags?: Array<string>;
    /**
     * Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.
     */
    concurrency?: number;
    /**
     * Optional fallback value for checks belonging to the group. How often the check should run in minutes.
     */
    frequency?: number | Frequency;
    environmentVariables?: Array<EnvironmentVariable>;
    /**
     * List of alert channels to be alerted when checks in this group fail or recover.
     */
    alertChannels?: Array<AlertChannel>;
    browserChecks?: BrowserCheckConfig;
    multiStepChecks?: MultiStepCheckConfig;
    /**
     * A valid piece of Node.js code to run in the setup phase of an API check in this group.
    * @deprecated use the "ApiCheck.setupScript" property instead and use common JS/TS code
    * composition to add group specific setup routines.
    */
    localSetupScript?: string;
    /**
     * A valid piece of Node.js code to run in the teardown phase of an API check in this group.
    * @deprecated use the "ApiCheck.tearDownScript" property instead and use common JS/TS code
    * composition to add group specific teardown routines.
     */
    localTearDownScript?: string;
    apiCheckDefaults?: ApiCheckDefaultConfig;
    /**
     * Sets a retry policy for the group. Use RetryStrategyBuilder to create a retry policy.
     */
    retryStrategy?: RetryStrategy;
}
/**
 * Creates a Check Group
 *
 * @remarks
 *
 * This class make use of the Check Groups endpoints.
 */
export declare class CheckGroup extends Construct {
    name: string;
    activated?: boolean;
    muted?: boolean;
    doubleCheck?: boolean;
    runtimeId?: string;
    locations: Array<keyof Region>;
    privateLocations?: Array<string | PrivateLocation>;
    tags?: Array<string>;
    concurrency?: number;
    frequency?: number | Frequency;
    environmentVariables?: Array<EnvironmentVariable>;
    alertChannels?: Array<AlertChannel>;
    localSetupScript?: string;
    localTearDownScript?: string;
    apiCheckDefaults: ApiCheckDefaultConfig;
    browserChecks?: BrowserCheckConfig;
    multiStepChecks?: MultiStepCheckConfig;
    retryStrategy?: RetryStrategy;
    static readonly __checklyType = "check-group";
    /**
     * Constructs the CheckGroup instance
     *
     * @param logicalId unique project-scoped resource name identification
     * @param props CheckGroup configuration properties
     *
     * {@link https://checklyhq.com/docs/cli/constructs/#checkgroup Read more in the docs}
     */
    constructor(logicalId: string, props: CheckGroupProps);
    private __addChecks;
    private __addSubscriptions;
    private __addPrivateLocationGroupAssignments;
    getCheckDefaults(): CheckConfigDefaults;
    getBrowserCheckDefaults(): CheckConfigDefaults;
    getMultiStepCheckDefaults(): CheckConfigDefaults;
    synthesize(): {
        name: string;
        activated: boolean | undefined;
        muted: boolean | undefined;
        doubleCheck: boolean | undefined;
        tags: string[] | undefined;
        locations: (keyof Region)[];
        privateLocations: undefined;
        concurrency: number | undefined;
        localSetupScript: string | undefined;
        localTearDownScript: string | undefined;
        apiCheckDefaults: ApiCheckDefaultConfig;
        environmentVariables: import("./key-value-pair").default[] | undefined;
        retryStrategy: RetryStrategy | undefined;
    };
}
export {};
