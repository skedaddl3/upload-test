"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Check = void 0;
const ref_1 = require("./ref");
const frequency_1 = require("./frequency");
const construct_1 = require("./construct");
const alert_channel_subscription_1 = require("./alert-channel-subscription");
const project_1 = require("./project");
const private_location_check_assignment_1 = require("./private-location-check-assignment");
// This is an abstract class. It shouldn't be used directly.
class Check extends construct_1.Construct {
    constructor(logicalId, props) {
        var _a, _b, _c, _d, _e;
        super(Check.__checklyType, logicalId);
        if (props.group) {
            Check.applyDefaultCheckGroupConfig(props, props.group.getCheckDefaults());
        }
        Check.applyDefaultCheckConfig(props);
        // TODO: Throw an error if required properties are still missing after applying the defaults.
        this.name = props.name;
        this.activated = props.activated;
        this.muted = props.muted;
        this.doubleCheck = props.doubleCheck;
        this.shouldFail = props.shouldFail;
        this.locations = props.locations;
        this.privateLocations = props.privateLocations;
        this.tags = props.tags;
        if (props.frequency instanceof frequency_1.Frequency) {
            this.frequency = props.frequency.frequency;
            this.frequencyOffset = props.frequency.frequencyOffset;
        }
        else {
            this.frequency = props.frequency;
        }
        this.runtimeId = props.runtimeId;
        this.environmentVariables = (_a = props.environmentVariables) !== null && _a !== void 0 ? _a : [];
        // Alert channel subscriptions will be synthesized separately in the Project construct.
        // This is due to the way things are organized on the BE.
        this.alertChannels = (_b = props.alertChannels) !== null && _b !== void 0 ? _b : [];
        // Prefer the `group` parameter, but support groupId for backwards compatibility.
        this.groupId = (_d = (_c = props.group) === null || _c === void 0 ? void 0 : _c.ref()) !== null && _d !== void 0 ? _d : props.groupId;
        // alertSettings, useGlobalAlertSettings, groupId, groupOrder
        this.testOnly = (_e = props.testOnly) !== null && _e !== void 0 ? _e : false;
        this.retryStrategy = props.retryStrategy;
        this.__checkFilePath = project_1.Session.checkFilePath;
    }
    static applyDefaultCheckGroupConfig(props, groupProps) {
        var _a;
        let configKey;
        for (configKey in groupProps) {
            const newVal = (_a = props[configKey]) !== null && _a !== void 0 ? _a : groupProps[configKey];
            props[configKey] = newVal;
        }
    }
    static applyDefaultCheckConfig(props) {
        var _a;
        if (!project_1.Session.checkDefaults) {
            return;
        }
        let configKey;
        for (configKey in project_1.Session.checkDefaults) {
            const newVal = (_a = props[configKey]) !== null && _a !== void 0 ? _a : project_1.Session.checkDefaults[configKey];
            props[configKey] = newVal;
        }
    }
    addSubscriptions() {
        if (!this.alertChannels || this.testOnly) {
            return;
        }
        for (const alertChannel of this.alertChannels) {
            const subscription = new alert_channel_subscription_1.AlertChannelSubscription(`check-alert-channel-subscription#${this.logicalId}#${alertChannel.logicalId}`, {
                alertChannelId: ref_1.Ref.from(alertChannel.logicalId),
                checkId: ref_1.Ref.from(this.logicalId),
                activated: true,
            });
        }
    }
    addPrivateLocationCheckAssignments() {
        if (!this.privateLocations) {
            return;
        }
        for (const privateLocation of this.privateLocations) {
            // slugName strings are processed in loadAllPrivateLocations()
            if (typeof privateLocation === 'string') {
                continue;
            }
            // use private location assignment for instances
            const assignment = new private_location_check_assignment_1.PrivateLocationCheckAssignment(`private-location-check-assignment#${this.logicalId}#${privateLocation.logicalId}`, {
                privateLocationId: ref_1.Ref.from(privateLocation.logicalId),
                checkId: ref_1.Ref.from(this.logicalId),
            });
        }
    }
    getSourceFile() {
        return this.__checkFilePath;
    }
    synthesize() {
        return {
            name: this.name,
            activated: this.activated,
            muted: this.muted,
            doubleCheck: this.doubleCheck,
            shouldFail: this.shouldFail,
            runtimeId: this.runtimeId,
            locations: this.locations,
            // private-location instances are assigned with loadAllPrivateLocations()
            privateLocations: undefined,
            tags: this.tags,
            frequency: this.frequency,
            frequencyOffset: this.frequencyOffset,
            groupId: this.groupId,
            environmentVariables: this.environmentVariables,
            retryStrategy: this.retryStrategy,
        };
    }
}
exports.Check = Check;
Check.__checklyType = 'check';
//# sourceMappingURL=check.js.map