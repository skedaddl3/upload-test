export type RetryStrategyType = 'LINEAR' | 'EXPONENTIAL' | 'FIXED';
export interface RetryStrategy {
    type: RetryStrategyType;
    /**
    * The number of seconds to wait before the first retry attempt.
    */
    baseBackoffSeconds?: number;
    /**
    * The maximum number of attempts to retry the check. Value must be between 1 and 10.
    */
    maxRetries?: number;
    /**
    * The total amount of time to continue retrying the check (maximum 600 seconds).
    */
    maxDurationSeconds?: number;
    /**
    * Whether retries should be run in the same region as the initial check run.
    */
    sameRegion?: boolean;
}
export type RetryStrategyOptions = Pick<RetryStrategy, 'baseBackoffSeconds' | 'maxRetries' | 'maxDurationSeconds' | 'sameRegion'>;
export declare class RetryStrategyBuilder {
    private static readonly DEFAULT_BASE_BACKOFF_SECONDS;
    private static readonly DEFAULT_MAX_RETRIES;
    private static readonly DEFAULT_MAX_DURATION_SECONDS;
    private static readonly DEFAULT_SAME_REGION;
    /**
     * Each retry is run with the same backoff between attempts.
     */
    static fixedStrategy(options?: RetryStrategyOptions): RetryStrategy;
    /**
     * The delay between retries increases linearly
     *
     * The delay between retries is calculated using `baseBackoffSeconds * attempt`.
     * For example, retries will be run with a backoff of 10s, 20s, 30s, and so on.
     */
    static linearStrategy(options?: RetryStrategyOptions): RetryStrategy;
    /**
     * The delay between retries increases exponentially
     *
     * The delay between retries is calculated using `baseBackoffSeconds ^ attempt`.
     * For example, retries will be run with a backoff of 10s, 100s, 1000s, and so on.
     */
    static exponentialStrategy(options?: RetryStrategyOptions): RetryStrategy;
    private static retryStrategy;
}
