"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const api = __importStar(require("../rest/api"));
const checkly_config_loader_1 = require("../services/checkly-config-loader");
const authCommand_1 = require("./authCommand");
const prompts_1 = __importDefault(require("prompts"));
const config_1 = __importDefault(require("../services/config"));
const util_1 = require("../services/util");
const common_messages_1 = __importDefault(require("../messages/common-messages"));
class Destroy extends authCommand_1.AuthCommand {
    async run() {
        var _a, _b;
        const { flags } = await this.parse(Destroy);
        const { force, config: configFilename } = flags;
        const { configDirectory, configFilenames } = (0, util_1.splitConfigFilePath)(configFilename);
        const { config: checklyConfig } = await (0, checkly_config_loader_1.loadChecklyConfig)(configDirectory, configFilenames);
        const { data: account } = await api.accounts.get(config_1.default.getAccountId());
        if (!force) {
            const { projectName } = await (0, prompts_1.default)({
                name: 'projectName',
                type: 'text',
                message: `Are you sure you want to delete all resources in project "${checklyConfig.projectName}" for account "${account.name}"?\n  Please confirm by typing the project name "${checklyConfig.projectName}":`,
            });
            if (projectName !== checklyConfig.projectName) {
                this.log(`The entered project name "${projectName}" doesn't match the expected project name "${checklyConfig.projectName}".`);
                return;
            }
        }
        try {
            await api.projects.deleteProject(checklyConfig.logicalId);
            this.log(`All resources associated with project "${checklyConfig.projectName}" have been successfully deleted.`);
        }
        catch (err) {
            if (((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status) === 400) {
                throw new Error(`Failed to destroy your project: ${(_b = err.response.data) === null || _b === void 0 ? void 0 : _b.message}`);
            }
            else {
                throw new Error(`Failed to destroy your project. ${err.message}`);
            }
        }
    }
}
exports.default = Destroy;
Destroy.hidden = false;
Destroy.description = 'Destroy your project with all its related resources.';
Destroy.flags = {
    force: core_1.Flags.boolean({
        char: 'f',
        description: common_messages_1.default.forceMode,
        default: false,
    }),
    config: core_1.Flags.string({
        char: 'c',
        description: common_messages_1.default.configFile,
    }),
};
//# sourceMappingURL=destroy.js.map