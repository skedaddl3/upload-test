"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompts_1 = __importDefault(require("prompts"));
const path = __importStar(require("path"));
const api = __importStar(require("../../rest/api"));
const core_1 = require("@oclif/core");
const authCommand_1 = require("../authCommand");
const util_1 = require("../../services/util");
const fs = __importStar(require("fs/promises"));
const CONTENTS_PREFIX = '# Created by Checkly CLI\n';
class EnvPull extends authCommand_1.AuthCommand {
    async run() {
        const { flags, args } = await this.parse(EnvPull);
        const { force } = flags;
        const filepath = path.resolve(args.filename);
        const filename = path.basename(filepath);
        const { data: environmentVariables } = await api.environmentVariables.getAll();
        // create an file in current directory and save the env vars there
        const env = CONTENTS_PREFIX + environmentVariables.map(({ key, value }) => `${key}=${(0, util_1.escapeValue)(value)}`).join('\n') + '\n';
        // wx will cause the write to fail if the file already exists
        // https://nodejs.org/api/fs.html#file-system-flags
        const flag = force ? 'w' : 'wx';
        try {
            await fs.writeFile(filepath, env, { flag });
        }
        catch (err) {
            // By catching EEXIST rather than checking fs.existsSync,
            // we avoid a race condition when a file is created between writing and checking
            if (err.code === 'EEXIST') {
                const { confirm } = await (0, prompts_1.default)({
                    name: 'confirm',
                    type: 'confirm',
                    message: `Found existing file ${filename}. Do you want to overwrite?`,
                });
                if (!confirm) {
                    this.log('Cancelled. No changes made.');
                    return;
                }
                await fs.writeFile(filepath, env);
            }
        }
        this.log(`Success! Environment variables written to ${filename}.`);
    }
}
exports.default = EnvPull;
EnvPull.hidden = false;
EnvPull.description = 'Pull Checkly environment variables via "checkly env pull <filename>".';
EnvPull.flags = {
    force: core_1.Flags.boolean({
        char: 'f',
        description: 'Force to overwrite existing file.',
        default: false,
    }),
};
EnvPull.args = {
    filename: core_1.Args.string({
        name: 'filename',
        required: false,
        description: 'Filename of the generated file.',
        default: '.env',
    }),
};
//# sourceMappingURL=pull.js.map