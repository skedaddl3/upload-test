"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const core_1 = require("@oclif/core");
const config_1 = __importDefault(require("../services/config"));
const api = __importStar(require("../rest/api"));
const authCommand_1 = require("./authCommand");
const login_1 = require("./login");
class Switch extends authCommand_1.AuthCommand {
    async run() {
        const { flags } = await this.parse(Switch);
        const { 'account-id': accountId } = flags;
        const onCancel = () => {
            this.error('Command cancelled.\n');
        };
        if (accountId) {
            try {
                const { data: account } = await api.accounts.get(accountId);
                config_1.default.data.set('accountId', account.id);
                this.log(`Account switched to ${chalk_1.default.bold.cyan(accountId)}`);
            }
            catch (e) {
                throw new Error(`Failed to find an account corresponding to account id ${accountId}`);
            }
            this.exit(0);
        }
        try {
            const { data: accounts } = await api.accounts.getAll();
            if (accounts.length === 1) {
                this.warn('Your user is only a member of one account: ' +
                    chalk_1.default.bold.cyan(accounts[0].name));
                this.exit(0);
            }
            const selectedAccount = await (0, login_1.selectAccount)(accounts, { onCancel });
            const { id, name } = selectedAccount;
            config_1.default.data.set('accountId', id);
            config_1.default.data.set('accountName', name);
            this.log(`Account switched to ${chalk_1.default.bold.cyan(name)}`);
        }
        catch (err) {
            throw new Error(`Failed to switch account. ${err.message}`);
        }
    }
}
exports.default = Switch;
Switch.hidden = false;
Switch.description = 'Switch user account.';
Switch.flags = {
    'account-id': core_1.Flags.string({
        char: 'a',
        name: 'accountId',
        description: 'The id of the account you want to switch to.',
    }),
};
//# sourceMappingURL=switch.js.map