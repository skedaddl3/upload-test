"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const conf_1 = __importDefault(require("conf"));
const dataSchema = {
    accountId: { type: 'string' },
    accountName: { type: 'string' },
};
const authSchema = {
    apiKey: { type: 'string' },
};
const projectSuffix = (_a = process.env.CHECKLY_ENV) !== null && _a !== void 0 ? _a : '';
// eslint-disable-next-line no-restricted-syntax
var Env;
(function (Env) {
    Env["production"] = "production";
    Env["staging"] = "staging";
    Env["development"] = "development";
    Env["local"] = "local";
})(Env || (Env = {}));
class ChecklyConfig {
    // Accessing auth or data will cause a config file to be created.
    // We should avoid doing this unless absolutely necessary, since this operation can fail due to file permissions.
    get auth() {
        var _a;
        // Create this._auth lazily
        return (_a = this._auth) !== null && _a !== void 0 ? _a : (this._auth = new conf_1.default({
            projectName: '@checkly/cli',
            configName: 'auth',
            projectSuffix,
            // @ts-ignore
            schema: authSchema,
        }));
    }
    get data() {
        var _a;
        // Create this._data lazily
        return (_a = this._data) !== null && _a !== void 0 ? _a : (this._data = new conf_1.default({
            projectName: '@checkly/cli',
            configName: 'config',
            projectSuffix,
            // @ts-ignore
            schema: dataSchema,
        }));
    }
    clear() {
        this.auth.clear();
        this.data.clear();
    }
    getEnv() {
        const environments = ['production', 'development', 'staging', 'local'];
        const env = process.env.CHECKLY_ENV || environments[0];
        if (!(env in Env)) {
            throw new Error('Invalid CHECKLY_ENV');
        }
        return env;
    }
    getApiKey() {
        return process.env.CHECKLY_API_KEY || this.auth.get('apiKey') || '';
    }
    getAccountId() {
        return process.env.CHECKLY_ACCOUNT_ID || this.data.get('accountId') || '';
    }
    hasEnvVarsConfigured() {
        const apiKey = process.env.CHECKLY_API_KEY || '';
        const accoundId = process.env.CHECKLY_ACCOUNT_ID || '';
        return apiKey !== '' || accoundId !== '';
    }
    getApiUrl() {
        const environments = {
            local: 'http://127.0.0.1:3000',
            development: 'https://api-dev.checklyhq.com',
            staging: 'https://api-test.checklyhq.com',
            production: 'https://api.checklyhq.com',
        };
        return environments[this.getEnv()];
    }
    getMqttUrl() {
        const environments = {
            local: 'wss://events-local.checklyhq.com',
            development: 'wss://events-dev.checklyhq.com',
            staging: 'wss://events-test.checklyhq.com',
            production: 'wss://events.checklyhq.com',
        };
        return environments[this.getEnv()];
    }
    hasValidCredentials() {
        if (this.getApiKey() !== '' && this.getAccountId() !== '') {
            return true;
        }
        return false;
    }
}
const config = new ChecklyConfig();
exports.default = config;
//# sourceMappingURL=config.js.map