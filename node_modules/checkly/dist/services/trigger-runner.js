"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoMatchingChecksError = void 0;
const api_1 = require("../rest/api");
const abstract_check_runner_1 = __importDefault(require("./abstract-check-runner"));
class NoMatchingChecksError extends Error {
}
exports.NoMatchingChecksError = NoMatchingChecksError;
class TriggerRunner extends abstract_check_runner_1.default {
    constructor(accountId, timeout, verbose, shouldRecord, location, targetTags, envVars, repoInfo, environment, testSessionName) {
        super(accountId, timeout, verbose);
        this.shouldRecord = shouldRecord;
        this.location = location;
        this.targetTags = targetTags;
        this.envVars = envVars;
        this.repoInfo = repoInfo;
        this.environment = environment;
        this.testSessionName = testSessionName;
    }
    async scheduleChecks(checkRunSuiteId) {
        var _a, _b, _c, _d, _e, _f;
        try {
            const { data } = await api_1.testSessions.trigger({
                name: (_a = this.testSessionName) !== null && _a !== void 0 ? _a : 'Triggered Session',
                shouldRecord: this.shouldRecord,
                runLocation: this.location,
                checkRunSuiteId,
                targetTags: this.targetTags,
                environmentVariables: this.envVars,
                repoInfo: this.repoInfo,
                environment: this.environment,
            });
            const { checks, checkRunIds, testSessionId, testResultIds, } = data;
            if (!checks.length) {
                // Currently the BE will never return an empty `checks` array, it returns a 403 instead.
                // This is added to make the old CLI versions compatible if we ever change this, though.
                throw new NoMatchingChecksError();
            }
            const checksMap = checks.reduce((acc, check) => {
                acc[check.id] = check;
                return acc;
            }, {});
            const augmentedChecks = Object.entries(checkRunIds).map(([checkId, checkRunId]) => ({
                checkRunId,
                check: checksMap[checkId],
                testResultId: testResultIds === null || testResultIds === void 0 ? void 0 : testResultIds[checkId],
            }));
            return { checks: augmentedChecks, testSessionId };
        }
        catch (err) {
            if (((_c = (_b = err.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.errorCode) === 'ERR_NO_MATCHING_CHECKS') {
                throw new NoMatchingChecksError();
            }
            throw new Error((_f = (_e = (_d = err.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.message) !== null && _f !== void 0 ? _f : err.message);
        }
    }
}
exports.default = TriggerRunner;
//# sourceMappingURL=trigger-runner.js.map