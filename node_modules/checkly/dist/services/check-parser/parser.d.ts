type Module = {
    localDependencies: Array<string>;
    npmDependencies: Array<string>;
};
type SupportedFileExtension = '.js' | '.mjs' | '.ts';
declare const JS_RESOLVE_ORDER: string[];
declare const TS_RESOLVE_ORDER: string[];
export declare class Parser {
    supportedModules: Set<string>;
    constructor(supportedNpmModules: Array<string>);
    parse(entrypoint: string): {
        entrypoint: {
            filePath: string;
            content: string;
        };
        dependencies: {
            filePath: string;
            content: string;
        }[];
    };
    static readDependency(filePath: string, preferedExtenstion: SupportedFileExtension): {
        filePath: string;
        content: string;
    }[];
    static tryReadFileExt(filePath: string, exts: typeof JS_RESOLVE_ORDER | typeof TS_RESOLVE_ORDER): {
        filePath: string;
        content: string;
    }[];
    static parseDependencies(filePath: string, contents: string): {
        module: Module;
        error?: any;
    };
    static jsNodeVisitor(localDependencies: Set<string>, npmDependencies: Set<string>): any;
    static tsNodeVisitor(tsParser: any, localDependencies: Set<string>, npmDependencies: Set<string>): any;
    static isRequireExpression(node: any): boolean;
    static getRequireStringArg(node: any): string | null;
    static registerDependency(importArg: string | null, localDependencies: Set<string>, npmDependencies: Set<string>): void;
}
export {};
