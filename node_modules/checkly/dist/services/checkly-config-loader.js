"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadChecklyConfig = void 0;
const path = __importStar(require("path"));
const fs_1 = require("fs");
const util_1 = require("./util");
const constructs_1 = require("../constructs");
// eslint-disable-next-line no-restricted-syntax
var Extension;
(function (Extension) {
    Extension["JS"] = ".js";
    Extension["MJS"] = ".mjs";
    Extension["TS"] = ".ts";
})(Extension || (Extension = {}));
function loadFile(file) {
    if (!(0, fs_1.existsSync)(file)) {
        return Promise.resolve(null);
    }
    switch (path.extname(file)) {
        case Extension.JS:
            return (0, util_1.loadJsFile)(file);
        case Extension.MJS:
            return (0, util_1.loadJsFile)(file);
        case Extension.TS:
            return (0, util_1.loadTsFile)(file);
        default:
            throw new Error(`Unsupported file extension ${file} for the config file`);
    }
}
function isString(obj) {
    return (Object.prototype.toString.call(obj) === '[object String]');
}
async function loadChecklyConfig(dir, filenames = ['checkly.config.ts', 'checkly.config.js', 'checkly.config.mjs']) {
    let config;
    constructs_1.Session.loadingChecklyConfigFile = true;
    constructs_1.Session.checklyConfigFileConstructs = [];
    for (const filename of filenames) {
        config = await loadFile(path.join(dir, filename));
        if (config) {
            break;
        }
    }
    if (!config) {
        throw new Error(`Unable to locate a config at ${dir} with ${filenames.join(', ')}.`);
    }
    for (const field of ['logicalId', 'projectName']) {
        const requiredField = config === null || config === void 0 ? void 0 : config[field];
        if (!requiredField || !(isString(requiredField))) {
            throw new Error(`Config object missing a ${field} as type string`);
        }
    }
    const constructs = constructs_1.Session.checklyConfigFileConstructs;
    constructs_1.Session.loadingChecklyConfigFile = false;
    constructs_1.Session.checklyConfigFileConstructs = [];
    return { config, constructs };
}
exports.loadChecklyConfig = loadChecklyConfig;
//# sourceMappingURL=checkly-config-loader.js.map