import { Reporter } from './reporter';
import { CheckStatus } from './util';
import type { CheckRunId, RunLocation } from '../services/abstract-check-runner';
import { Check } from '../constructs/check';
export type checkFilesMap = Map<string | undefined, Map<CheckRunId, {
    check?: Check;
    result?: any;
    titleString: string;
    testResultId?: string;
    checkStatus?: CheckStatus;
}>>;
export default abstract class AbstractListReporter implements Reporter {
    _clearString: string;
    runLocation: RunLocation;
    checkFilesMap?: checkFilesMap;
    numChecks?: number;
    verbose: boolean;
    testSessionId?: string;
    _isSchedulingDelayExceeded?: boolean;
    constructor(runLocation: RunLocation, verbose: boolean);
    onBegin(checks: Array<{
        check: any;
        checkRunId: CheckRunId;
        testResultId?: string;
    }>, testSessionId?: string): void;
    onCheckInProgress(check: any, checkRunId: CheckRunId): void;
    abstract onEnd(): void;
    onSchedulingDelayExceeded(): void;
    onCheckEnd(checkRunId: CheckRunId, checkResult: any): void;
    onError(err: Error): void;
    _clearSummary(): void;
    _printSummary(opts?: {
        skipCheckCount?: boolean;
    }): void;
    _printBriefSummary(): void;
    _printTestSessionsUrl(): Promise<void>;
    _runLocationString(): string;
}
