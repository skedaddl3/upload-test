"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GithubMdBuilder = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const abstract_list_1 = __importDefault(require("./abstract-list"));
const util_1 = require("./util");
const outputFile = './checkly-github-report.md';
function nonNullable(value) {
    return value !== null && value !== undefined;
}
class GithubMdBuilder {
    constructor(options) {
        this.tableRows = [];
        this.header = '# Checkly Test Session Summary';
        this.tableSeparatorFiller = '|:-';
        this.tableSeparator = '|';
        this.testSessionId = options.testSessionId;
        this.numChecks = options.numChecks;
        this.runLocation = options.runLocation;
        this.checkFilesMap = options.checkFilesMap;
        this.subHeader = [];
        this.hasFilenames = !(options.checkFilesMap.size === 1 && options.checkFilesMap.has(undefined));
        this.tableHeaders = [
            'Result',
            'Name',
            'Check Type',
            this.hasFilenames ? 'Filename' : undefined,
            'Duration',
        ].filter(nonNullable);
        this.extraTableHeadersWithLinks = ['Link'];
        this.tableRows = [];
    }
    render() {
        this.subHeader.push(`Ran **${this.numChecks}** checks in **${this.runLocation}**.`);
        if (this.testSessionId) {
            this.subHeader.push(`[View detailed test session summary](${(0, util_1.getTestSessionUrl)(this.testSessionId)})`);
        }
        if (this.testSessionId) {
            this.tableHeaders = this.tableHeaders.concat(this.extraTableHeadersWithLinks);
        }
        for (const [_, checkMap] of this.checkFilesMap.entries()) {
            for (const [_, { result, testResultId }] of checkMap.entries()) {
                const tableRow = [
                    `${result.hasFailures ? '❌ Fail' : '✅ Pass'}`,
                    `${result.name}`,
                    `${result.checkType}`,
                    this.hasFilenames ? `\`${result.sourceFile}\`` : undefined,
                    `${(0, util_1.formatDuration)(result.responseTime)} `,
                ].filter(nonNullable);
                if (this.testSessionId && testResultId) {
                    const linkColumn = `[Full test report](${(0, util_1.getTestSessionUrl)(this.testSessionId)}/results/${testResultId})`;
                    tableRow.push(linkColumn);
                }
                this.tableRows.push(this.tableSeparator + tableRow.join(this.tableSeparator) + this.tableSeparator);
            }
        }
        let markdown = this.header + '\n' +
            this.subHeader.join('\n') + '\n' +
            this.tableSeparator + this.tableHeaders.join('|') + this.tableSeparator + '\n' +
            this.tableSeparatorFiller.repeat(this.tableHeaders.length) + this.tableSeparator + '\n' +
            this.tableRows.sort((a, b) => a < b ? 1 : -1).join('\n') + '\n';
        if (!this.testSessionId) {
            markdown = markdown + '> Tip: use `--record` to get a full test session overview with traces, videos and logs, e.g. `npx checkly test --reporter=github --record`';
        }
        return markdown;
    }
}
exports.GithubMdBuilder = GithubMdBuilder;
class GithubReporter extends abstract_list_1.default {
    onBegin(checks, testSessionId) {
        super.onBegin(checks, testSessionId);
        (0, util_1.printLn)(`Running ${this.numChecks} checks in ${this._runLocationString()}.`, 2, 1);
    }
    onEnd() {
        var _a;
        this._printBriefSummary();
        const githubMdBuilder = new GithubMdBuilder({
            testSessionId: this.testSessionId,
            numChecks: this.numChecks,
            runLocation: this._runLocationString(),
            checkFilesMap: this.checkFilesMap,
        });
        const markDown = githubMdBuilder.render();
        const summaryFilename = (_a = process.env.CHECKLY_REPORTER_GITHUB_OUTPUT) !== null && _a !== void 0 ? _a : outputFile;
        fs.mkdirSync(path.resolve(path.dirname(summaryFilename)), { recursive: true });
        fs.writeFileSync(summaryFilename, markDown);
        (0, util_1.printLn)(`Github summary saved in '${path.resolve(summaryFilename)}'.`, 2);
        this._printTestSessionsUrl();
    }
}
exports.default = GithubReporter;
//# sourceMappingURL=github.js.map