"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const indent_string_1 = __importDefault(require("indent-string"));
const chalk_1 = __importDefault(require("chalk"));
const abstract_list_1 = __importDefault(require("./abstract-list"));
const util_1 = require("./util");
class ListReporter extends abstract_list_1.default {
    onBegin(checks, testSessionId) {
        super.onBegin(checks, testSessionId);
        (0, util_1.printLn)(`Running ${this.numChecks} checks in ${this._runLocationString()}.`, 2, 1);
        this._printSummary();
    }
    onCheckInProgress(check, checkRunId) {
        super.onCheckInProgress(check, checkRunId);
        this._clearSummary();
        this._printSummary();
    }
    onSchedulingDelayExceeded() {
        super.onSchedulingDelayExceeded();
        this._clearSummary();
        this._printSummary();
    }
    onEnd() {
        this._clearSummary();
        this._printSummary();
        this._printTestSessionsUrl();
    }
    onCheckEnd(checkRunId, checkResult, links) {
        var _a, _b;
        super.onCheckEnd(checkRunId, checkResult);
        this._clearSummary();
        if (this.verbose) {
            (0, util_1.printLn)((0, util_1.formatCheckTitle)(checkResult.hasFailures ? util_1.CheckStatus.FAILED : util_1.CheckStatus.SUCCESSFUL, checkResult));
            (0, util_1.printLn)((0, indent_string_1.default)((0, util_1.formatCheckResult)(checkResult), 4), 2, 1);
        }
        else {
            if (checkResult.hasFailures) {
                (0, util_1.printLn)((0, util_1.formatCheckTitle)(util_1.CheckStatus.FAILED, checkResult));
                (0, util_1.printLn)((0, indent_string_1.default)((0, util_1.formatCheckResult)(checkResult), 4), 2, 1);
            }
        }
        if (links) {
            (0, util_1.printLn)((0, indent_string_1.default)('View result: ' + chalk_1.default.underline.cyan(`${links.testResultLink}`), 4));
            if ((_a = links.testTraceLinks) === null || _a === void 0 ? void 0 : _a.length) {
                // TODO: print all video files URLs
                (0, util_1.printLn)((0, indent_string_1.default)('View trace : ' + chalk_1.default.underline.cyan(links.testTraceLinks.join(', ')), 4));
            }
            if ((_b = links.videoLinks) === null || _b === void 0 ? void 0 : _b.length) {
                // TODO: print all trace files URLs
                (0, util_1.printLn)((0, indent_string_1.default)('View video : ' + chalk_1.default.underline.cyan(`${links.videoLinks.join(', ')}`), 4));
            }
            (0, util_1.printLn)('');
        }
        this._printSummary();
    }
    onError(err) {
        this._clearSummary();
        super.onError(err);
    }
}
exports.default = ListReporter;
//# sourceMappingURL=list.js.map