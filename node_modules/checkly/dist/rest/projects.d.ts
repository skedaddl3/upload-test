import type { AxiosInstance } from 'axios';
import type { GitInformation } from '../services/util';
export interface Project {
    name: string;
    logicalId: string;
    repoUrl?: string;
}
type ProjectResponse = Project & {
    id: string;
    created_at: string;
};
export interface Change {
    logicalId: string;
    physicalId?: string | number;
    type: string;
    action: string;
}
export interface ResourceSync {
    logicalId: string;
    physicalId?: string | number;
    type: string;
    member: boolean;
    payload: any;
}
export interface ProjectSync {
    project: Project;
    resources: Array<ResourceSync>;
    repoInfo: GitInformation | null;
}
export interface ProjectDeployResponse {
    project: Project;
    diff: Array<Change>;
}
declare class Projects {
    api: AxiosInstance;
    constructor(api: AxiosInstance);
    getAll(): Promise<import("axios").AxiosResponse<ProjectResponse[], any>>;
    get(id: string): Promise<import("axios").AxiosResponse<ProjectResponse, any>>;
    create(project: Project): Promise<import("axios").AxiosResponse<any, any>>;
    deleteProject(logicalId: string): Promise<import("axios").AxiosResponse<any, any>>;
    deploy(resources: ProjectSync, { dryRun, scheduleOnDeploy }?: {
        dryRun?: boolean | undefined;
        scheduleOnDeploy?: boolean | undefined;
    }): Promise<import("axios").AxiosResponse<ProjectDeployResponse, any>>;
}
export default Projects;
