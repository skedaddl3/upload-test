"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const examples_1 = __importDefault(require("./examples"));
class ChecklyHelpClass extends core_1.Help {
    formatAllCommands(commands, topics) {
        if (commands.length === 0)
            return '';
        const coreCommands = commands.filter(c => c.coreCommand);
        const additionalCommands = commands.filter(c => !c.coreCommand);
        const formatCommandsWithoutTopics = (commands) => commands
            // discard commands with ':' indicating they are under a topic
            .filter(c => !c.id.includes(':') || c.coreCommand)
            .map(c => [c.id.replace(/:/g, ' '), this.summary(c)]);
        const formatCommandsWithTopics = (commands) => commands
            // discard commands with ':' indicating they are under a topic
            .filter(c => !c.id.includes(':'))
            .map(c => [c.id, this.summary(c)])
            .concat(topics.map(t => [t.name, t.description]))
            .sort(([a, x], [b, y]) => (a < b) ? -1 : 1);
        const reder = (commands) => this.renderList(commands, {
            spacer: '\n',
            stripAnsi: this.opts.stripAnsi,
            indentation: 2,
        });
        return this.section('CORE COMMANDS', reder(formatCommandsWithoutTopics(coreCommands))) +
            '\n' + '\n' +
            this.section('ADDITIONAL COMMANDS', reder(formatCommandsWithTopics(additionalCommands)));
    }
    showRootHelp() {
        var _a, _b;
        const state = (_b = (_a = this.config.pjson) === null || _a === void 0 ? void 0 : _a.oclif) === null || _b === void 0 ? void 0 : _b.state;
        if (state) {
            this.log(state === 'deprecated'
                ? `${this.config.bin} is deprecated`
                : `${this.config.bin} is in ${state}.\n`);
        }
        this.log(this.formatRoot());
        this.log('');
        if (this.sortedCommands.length > 0) {
            this.log(this.formatAllCommands(this.sortedCommands, this.sortedTopics));
            this.log('');
        }
        this.log(this.section('ENVIRONMENT VARIABLES', `Running the CLI from your CI pipeline will need to export variables in the shell:\n
  CHECKLY_ACCOUNT_ID    Checkly account ID.
  CHECKLY_API_KEY       Checkly User API Key.
    `));
        const examplesString = examples_1.default.reduce((accumulator, example) => {
            return accumulator + `${example.description}\n\n${this.indent('$ ' + example.command)}\n\n`;
        }, '');
        this.log(this.section('EXAMPLES', examplesString));
        return Promise.resolve();
    }
}
exports.default = ChecklyHelpClass;
//# sourceMappingURL=help-extension.js.map